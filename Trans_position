/******************************************************************************

Welcome to GDB Online.
  GDB online is an online compiler and debugger tool for C, C++, Python, PHP, Ruby, 
  C#, OCaml, VB, Perl, Swift, Prolog, Javascript, Pascal, COBOL, HTML, CSS, JS
  Code, Compile, Run and Debug online from anywhere in world.

*******************************************************************************/

//transpositional 

#include<bits/stdc++.h>
using namespace std;

string const key = "rush";

map<int,int> mp;

void setpermut()
{			
	for(int i=0; i < key.length(); i++) 
	    mp[key[i]] = i;
}

string encryptMessage(string msg)
{
	int row,col,j;
	string cipher = "";
	
	col = key.length();
	
	row = msg.length()/col;
	
	if (msg.length() % col)
		row += 1;

	char matrix[row][col];

	for (int i=0,k=0; i < row; i++)
	{
		for (int j=0; j<col; )
		{
			if(msg[k] == '\0')
			{
				matrix[i][j] = '_';	
				j++;
			}
			
			if( isalpha(msg[k]) || msg[k]==' ')
			{
				matrix[i][j] = msg[k];
				j++;
			}
			k++;
		}
	}

	for (auto it : mp)
	{
		j=it.second;
		
		for (int i=0; i<row; i++)
		{
			if( isalpha(matrix[i][j]) || matrix[i][j]==' ' || matrix[i][j]=='_')
				cipher += matrix[i][j];
		}
	}

	return cipher;
}

// Decryption
string decryptMessage(string cipher)
{
	int col = key.length();

	int row = cipher.length()/col;
	char cipherMat[row][col];

	for (int j=0,k=0; j<col; j++)
		for (int i=0; i<row; i++)
			cipherMat[i][j] = cipher[k++];

	int index = 0;
    
	for( auto it : mp)
		it.second = index++;

	char decCipher[row][col];
	map<int,int>::iterator it=mp.begin();
	int k = 0;
	for (int l=0,j; key[l]!='\0'; k++)
	{
		j = mp[key[l++]];
		for (int i=0; i<row; i++)
		{
			decCipher[i][k]=cipherMat[i][j];
		}
	}

	string msg = "";
	for (int i=0; i<row; i++)
	{
		for(int j=0; j<col; j++)
		{
			if(decCipher[i][j] != '_')
				msg += decCipher[i][j];
		}
	}
	return msg;
}

int main(void)
{
	string msg = "computer application";

	setpermut();
	
	string cipher = encryptMessage(msg);
    
	cout << "Message after enceryption: " << cipher << endl;
	
	cout << "Message afeter decryption: " << decryptMessage(cipher) << endl;

}
